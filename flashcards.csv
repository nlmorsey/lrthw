Term;Definition
puts;Writes the given objects to IOS
"""";"double quotes. Every time you put "" (double-quotes) around a piece of text you have been making a string. They also tell Ruby to replace variables it finds with #{}."
#;pound
Comments;Comments are very important in your programs. They are used to tell you what something does in English  and they are used to disable parts of your program if you need to remove them temporarily. Here's how you use comments in Ruby: #.
};right-bracket
+;plus
/;forward slash
.;In Ruby you call a module method by preceding its name with the module's name and a period
%;"Why is the % character a ""modulus"" and not a ""percent""? Mostly that's just how the designers chose to use that symbol. In normal writing you are correct to read it as a ""percent."" In programming this calculation is typically done with simple division and the / operator. The % modulus is a different operation that just happens to use the % symbol. How does % work? Another way to say it is  ""X divided by Y with J remaining."" For example  ""100 divided by 16 with 4 remaining."" The result of % is the J part  or the remaining part."
<;less-than
>;greater-than
>=;greater-than-equal
<=;less-than-equal
-;minus
*;asterisk
{;left-bracket
=;The = (single-equal) assigns the value on the right to a variable on the left.
_;underscore. We use this character a lot to put an imaginary space between words in variable names.
/;forward slash
\;back slash
';single quote. Tells Ruby to leave the string alone and ignore any variables inside of it.
FALSE;keyword
TRUE;keyword
nil;keyword
print;Writes the given objects to IOS.
%{};"percent literals:

%q[ ]	Non-interpolated String (except for \\ \[ and \])
%Q[ ]	Interpolated String (default)
%r[ ]	Interpolated Regexp (flags can appear after the closing delimiter)
%s[ ]	Non-interpolated Symbol
%w[ ]	Non-interpolated Array of words  separated by whitespace
%W[ ]	Interpolated Array of words  separated by whitespace
%x[ ]	Interpolated shell command"
:;colon
\n;backslash 'n' for newline character
%q{};Used for single-quoted strings.The syntax is similar to %Q  but single-quoted strings are not subject to expression substitution or escape sequences.
\t;tab
\\;backslash escape sequence
"""""""";"Triple-quotes  which is just """""" and works like a string  but you also can put as many lines of text as you want until you type """""" again."
gets;Reads the next line from the IO stream
chomp;Returns a new String with the given record separator removed from the end.
$stdin;You should use $stdin.gets.chomp since the action gets.chomp has problems with ARGV.
to_i;converts to integer
ARGV;In Ruby  ARGV is a constant defined in the Object class. It is an instance of the Array class and has access to all the array methods. ... By default  Ruby captures all the command line arguments passed to a Ruby program (split by spaces) when the command-line binary is invoked and stores them as strings in the ARGV array.
first;Returns the first element  or the first n elements  of the array.
open;Opens the file named by filename according to the given mode and returns a new File object.
read;Reads the contents of the file. You can assign the result to a variable.
'w';"It's really just a string with a character in it for the kind of mode for the file. If you use 'w' then you're saying ""open this file in 'write' mode "" thus the 'w' character. There's also 'r' for ""read "" 'a' for append  and modifiers on these."
truncate;Empties the file. Watch out if you care about the file.
write('stuff');"Writes ""stuff"" to the file."
close;Closes IOS and flushes any pending writes to the operating system.
File;A File is an abstraction of any file object accessible by the program and is closely associated with class IO File.
exist?;Return true if the named file exists.
*;asterisk. A lot lie your argv parameter but for functions.
def;"def for ""define"". You can create a function by using the word def in Ruby."
end;Marks the end of a while  until  begin  if  def  class  or other keyword-based  block-based construct.
seek(0);Move the read/write location to the beginning of the file. The seek() function is dealing in bytes  not lines. The code seek(0) moves the file to the 0 byte (first byte) in the file
return;Inside a method definition  returns control to the context of the method call.
.();The dot-parentheses notation is a shorthand way for passing arguments to the implicit call method on a Ruby object.
irb;How to start irb from the command line
PEMDAS;order of operations: Parentheses Exponents Multiplication Division Addition Subtraction
floating point number;A number with a decimal point
popular variable names;i  x  and j
==;double-equal. Tests whether two things have the same value.
string;"A string is usually a bit of text you want to display to someone or export out of the program you are writing. Ruby knows you want something to be a string when you put either "" (double-quotes) or ' (single-quotes) around the text."
#{};String Interpolation. You embed variables inside a string by using a special #{} sequence and then put the variable you want inside the {} characters.
valid variable name;must start with a character  e.g. 'a1'
variable;Nothing more than a name for something. A variable is any line of code where you set a name = (equal) to a value.
\';single-quote escape sequence
"\""""";double-quote escape sequence
\\;prints \
\';prints '
"\""";"prints """
\a;prints a blank space
\b;backspace
\f;newline + tab
\n;new line
\r;Deletes phrase before \r
string concatenation;Adding strings together using the plus '+' sign.
.to_i;Convert to integer.
.to_f;Convert to floating point number.
Arguments;The objects passed when calling the method.
ARGV;The 'argument variable'. ARGF is a stream designed for use in scripts that process files given as command-line arguments or passed in via STDIN.
readline;Reads just one line of a text file.
truncate;Empties the file. Watch out if you care about the file.
close;Closes the file. Like File->Save.. in your editor.
modifiers to file modes;The most important one to know for now is the + modifier  so you can do 'w+'  'r+'  and 'a+'. This will open the file in both read and write mode and  depending on the character use  position the file in different ways.
File.exist?(to_file);"This can be broken down as  ""File! I want you to use your exist? function to tell me if to_file exists on the disk."" Yet another way to say this is  ""Get the exist? function from File and call it with the variable to_file."""
+=;"You know how in English I can rewrite ""it is"" as ""it's""? Or I can rewrite ""you are"" as ""you're""? In English this is called a contraction  and this is kind of like a contraction for the two operations = and +. That means x = x + y is the same as x += y."
